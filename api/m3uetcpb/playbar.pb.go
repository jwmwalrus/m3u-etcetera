// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: api/m3uetcpb/playbar.proto

package m3uetcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlaybarAction int32

const (
	PlaybarAction_BAR_NONE       PlaybarAction = 0
	PlaybarAction_BAR_OPEN       PlaybarAction = 1
	PlaybarAction_BAR_ACTIVATE   PlaybarAction = 2
	PlaybarAction_BAR_DEACTIVATE PlaybarAction = 3
	PlaybarAction_BAR_CLOSE      PlaybarAction = 4
)

// Enum value maps for PlaybarAction.
var (
	PlaybarAction_name = map[int32]string{
		0: "BAR_NONE",
		1: "BAR_OPEN",
		2: "BAR_ACTIVATE",
		3: "BAR_DEACTIVATE",
		4: "BAR_CLOSE",
	}
	PlaybarAction_value = map[string]int32{
		"BAR_NONE":       0,
		"BAR_OPEN":       1,
		"BAR_ACTIVATE":   2,
		"BAR_DEACTIVATE": 3,
		"BAR_CLOSE":      4,
	}
)

func (x PlaybarAction) Enum() *PlaybarAction {
	p := new(PlaybarAction)
	*p = x
	return p
}

func (x PlaybarAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybarAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_m3uetcpb_playbar_proto_enumTypes[0].Descriptor()
}

func (PlaybarAction) Type() protoreflect.EnumType {
	return &file_api_m3uetcpb_playbar_proto_enumTypes[0]
}

func (x PlaybarAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaybarAction.Descriptor instead.
func (PlaybarAction) EnumDescriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{0}
}

type PlaylistAction int32

const (
	PlaylistAction_PL_NONE    PlaylistAction = 0
	PlaylistAction_PL_CREATE  PlaylistAction = 1
	PlaylistAction_PL_UPDATE  PlaylistAction = 2
	PlaylistAction_PL_DESTROY PlaylistAction = 3
)

// Enum value maps for PlaylistAction.
var (
	PlaylistAction_name = map[int32]string{
		0: "PL_NONE",
		1: "PL_CREATE",
		2: "PL_UPDATE",
		3: "PL_DESTROY",
	}
	PlaylistAction_value = map[string]int32{
		"PL_NONE":    0,
		"PL_CREATE":  1,
		"PL_UPDATE":  2,
		"PL_DESTROY": 3,
	}
)

func (x PlaylistAction) Enum() *PlaylistAction {
	p := new(PlaylistAction)
	*p = x
	return p
}

func (x PlaylistAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaylistAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_m3uetcpb_playbar_proto_enumTypes[1].Descriptor()
}

func (PlaylistAction) Type() protoreflect.EnumType {
	return &file_api_m3uetcpb_playbar_proto_enumTypes[1]
}

func (x PlaylistAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaylistAction.Descriptor instead.
func (PlaylistAction) EnumDescriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{1}
}

type PlaylistGroupAction int32

const (
	PlaylistGroupAction_PG_NONE             PlaylistGroupAction = 0
	PlaylistGroupAction_PG_CREATE           PlaylistGroupAction = 1
	PlaylistGroupAction_PG_UPDATE           PlaylistGroupAction = 2
	PlaylistGroupAction_PG_DESTROY          PlaylistGroupAction = 3
	PlaylistGroupAction_PG_ADD_PLAYLISTS    PlaylistGroupAction = 4
	PlaylistGroupAction_PG_REMOVE_PLAYLISTS PlaylistGroupAction = 5
)

// Enum value maps for PlaylistGroupAction.
var (
	PlaylistGroupAction_name = map[int32]string{
		0: "PG_NONE",
		1: "PG_CREATE",
		2: "PG_UPDATE",
		3: "PG_DESTROY",
		4: "PG_ADD_PLAYLISTS",
		5: "PG_REMOVE_PLAYLISTS",
	}
	PlaylistGroupAction_value = map[string]int32{
		"PG_NONE":             0,
		"PG_CREATE":           1,
		"PG_UPDATE":           2,
		"PG_DESTROY":          3,
		"PG_ADD_PLAYLISTS":    4,
		"PG_REMOVE_PLAYLISTS": 5,
	}
)

func (x PlaylistGroupAction) Enum() *PlaylistGroupAction {
	p := new(PlaylistGroupAction)
	*p = x
	return p
}

func (x PlaylistGroupAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaylistGroupAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_m3uetcpb_playbar_proto_enumTypes[2].Descriptor()
}

func (PlaylistGroupAction) Type() protoreflect.EnumType {
	return &file_api_m3uetcpb_playbar_proto_enumTypes[2]
}

func (x PlaylistGroupAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaylistGroupAction.Descriptor instead.
func (PlaylistGroupAction) EnumDescriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{2}
}

type PlaylistTrackAction int32

const (
	PlaylistTrackAction_PT_NONE    PlaylistTrackAction = 0
	PlaylistTrackAction_PT_APPEND  PlaylistTrackAction = 1
	PlaylistTrackAction_PT_INSERT  PlaylistTrackAction = 2
	PlaylistTrackAction_PT_PREPEND PlaylistTrackAction = 3
	PlaylistTrackAction_PT_DELETE  PlaylistTrackAction = 4
	PlaylistTrackAction_PT_CLEAR   PlaylistTrackAction = 5
	PlaylistTrackAction_PT_MOVE    PlaylistTrackAction = 6
)

// Enum value maps for PlaylistTrackAction.
var (
	PlaylistTrackAction_name = map[int32]string{
		0: "PT_NONE",
		1: "PT_APPEND",
		2: "PT_INSERT",
		3: "PT_PREPEND",
		4: "PT_DELETE",
		5: "PT_CLEAR",
		6: "PT_MOVE",
	}
	PlaylistTrackAction_value = map[string]int32{
		"PT_NONE":    0,
		"PT_APPEND":  1,
		"PT_INSERT":  2,
		"PT_PREPEND": 3,
		"PT_DELETE":  4,
		"PT_CLEAR":   5,
		"PT_MOVE":    6,
	}
)

func (x PlaylistTrackAction) Enum() *PlaylistTrackAction {
	p := new(PlaylistTrackAction)
	*p = x
	return p
}

func (x PlaylistTrackAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaylistTrackAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_m3uetcpb_playbar_proto_enumTypes[3].Descriptor()
}

func (PlaylistTrackAction) Type() protoreflect.EnumType {
	return &file_api_m3uetcpb_playbar_proto_enumTypes[3]
}

func (x PlaylistTrackAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaylistTrackAction.Descriptor instead.
func (PlaylistTrackAction) EnumDescriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{3}
}

type PlaybarEvent int32

const (
	PlaybarEvent_BE_NONE            PlaybarEvent = 0
	PlaybarEvent_BE_INITIAL         PlaybarEvent = 1
	PlaybarEvent_BE_INITIAL_ITEM    PlaybarEvent = 2
	PlaybarEvent_BE_INITIAL_DONE    PlaybarEvent = 3
	PlaybarEvent_BE_ITEM_ADDED      PlaybarEvent = 4
	PlaybarEvent_BE_ITEM_CHANGED    PlaybarEvent = 5
	PlaybarEvent_BE_ITEM_REMOVED    PlaybarEvent = 6
	PlaybarEvent_BE_OPEN_ITEMS      PlaybarEvent = 7
	PlaybarEvent_BE_OPEN_ITEMS_ITEM PlaybarEvent = 8
	PlaybarEvent_BE_OPEN_ITEMS_DONE PlaybarEvent = 9
)

// Enum value maps for PlaybarEvent.
var (
	PlaybarEvent_name = map[int32]string{
		0: "BE_NONE",
		1: "BE_INITIAL",
		2: "BE_INITIAL_ITEM",
		3: "BE_INITIAL_DONE",
		4: "BE_ITEM_ADDED",
		5: "BE_ITEM_CHANGED",
		6: "BE_ITEM_REMOVED",
		7: "BE_OPEN_ITEMS",
		8: "BE_OPEN_ITEMS_ITEM",
		9: "BE_OPEN_ITEMS_DONE",
	}
	PlaybarEvent_value = map[string]int32{
		"BE_NONE":            0,
		"BE_INITIAL":         1,
		"BE_INITIAL_ITEM":    2,
		"BE_INITIAL_DONE":    3,
		"BE_ITEM_ADDED":      4,
		"BE_ITEM_CHANGED":    5,
		"BE_ITEM_REMOVED":    6,
		"BE_OPEN_ITEMS":      7,
		"BE_OPEN_ITEMS_ITEM": 8,
		"BE_OPEN_ITEMS_DONE": 9,
	}
)

func (x PlaybarEvent) Enum() *PlaybarEvent {
	p := new(PlaybarEvent)
	*p = x
	return p
}

func (x PlaybarEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybarEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_api_m3uetcpb_playbar_proto_enumTypes[4].Descriptor()
}

func (PlaybarEvent) Type() protoreflect.EnumType {
	return &file_api_m3uetcpb_playbar_proto_enumTypes[4]
}

func (x PlaybarEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaybarEvent.Descriptor instead.
func (PlaybarEvent) EnumDescriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{4}
}

type GetPlaybarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perspective Perspective `protobuf:"varint,1,opt,name=perspective,proto3,enum=m3uetcpb.Perspective" json:"perspective,omitempty"`
}

func (x *GetPlaybarRequest) Reset() {
	*x = GetPlaybarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaybarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaybarRequest) ProtoMessage() {}

func (x *GetPlaybarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaybarRequest.ProtoReflect.Descriptor instead.
func (*GetPlaybarRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlaybarRequest) GetPerspective() Perspective {
	if x != nil {
		return x.Perspective
	}
	return Perspective_MUSIC
}

type GetPlaybarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *GetPlaybarResponse) Reset() {
	*x = GetPlaybarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaybarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaybarResponse) ProtoMessage() {}

func (x *GetPlaybarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaybarResponse.ProtoReflect.Descriptor instead.
func (*GetPlaybarResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlaybarResponse) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type GetPlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetPlaylistRequest) Reset() {
	*x = GetPlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistRequest) ProtoMessage() {}

func (x *GetPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{2}
}

func (x *GetPlaylistRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPlaylistRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist       *Playlist        `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
	PlaylistTracks []*PlaylistTrack `protobuf:"bytes,2,rep,name=playlist_tracks,json=playlistTracks,proto3" json:"playlist_tracks,omitempty"`
	Tracks         []*Track         `protobuf:"bytes,3,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *GetPlaylistResponse) Reset() {
	*x = GetPlaylistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistResponse) ProtoMessage() {}

func (x *GetPlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlaylistResponse) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

func (x *GetPlaylistResponse) GetPlaylistTracks() []*PlaylistTrack {
	if x != nil {
		return x.PlaylistTracks
	}
	return nil
}

func (x *GetPlaylistResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type GetAllPlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perspective Perspective `protobuf:"varint,1,opt,name=perspective,proto3,enum=m3uetcpb.Perspective" json:"perspective,omitempty"`
	Limit       int32       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAllPlaylistsRequest) Reset() {
	*x = GetAllPlaylistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlaylistsRequest) ProtoMessage() {}

func (x *GetAllPlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlaylistsRequest.ProtoReflect.Descriptor instead.
func (*GetAllPlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllPlaylistsRequest) GetPerspective() Perspective {
	if x != nil {
		return x.Perspective
	}
	return Perspective_MUSIC
}

func (x *GetAllPlaylistsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAllPlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *GetAllPlaylistsResponse) Reset() {
	*x = GetAllPlaylistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlaylistsResponse) ProtoMessage() {}

func (x *GetAllPlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlaylistsResponse.ProtoReflect.Descriptor instead.
func (*GetAllPlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllPlaylistsResponse) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type GetPlaylistGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlaylistGroupRequest) Reset() {
	*x = GetPlaylistGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistGroupRequest) ProtoMessage() {}

func (x *GetPlaylistGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistGroupRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlaylistGroupRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPlaylistGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistGroup *PlaylistGroup `protobuf:"bytes,1,opt,name=playlist_group,json=playlistGroup,proto3" json:"playlist_group,omitempty"`
}

func (x *GetPlaylistGroupResponse) Reset() {
	*x = GetPlaylistGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistGroupResponse) ProtoMessage() {}

func (x *GetPlaylistGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistGroupResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{7}
}

func (x *GetPlaylistGroupResponse) GetPlaylistGroup() *PlaylistGroup {
	if x != nil {
		return x.PlaylistGroup
	}
	return nil
}

type GetAllPlaylistGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perspective Perspective `protobuf:"varint,1,opt,name=perspective,proto3,enum=m3uetcpb.Perspective" json:"perspective,omitempty"`
	Limit       int32       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAllPlaylistGroupsRequest) Reset() {
	*x = GetAllPlaylistGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlaylistGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlaylistGroupsRequest) ProtoMessage() {}

func (x *GetAllPlaylistGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlaylistGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetAllPlaylistGroupsRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllPlaylistGroupsRequest) GetPerspective() Perspective {
	if x != nil {
		return x.Perspective
	}
	return Perspective_MUSIC
}

func (x *GetAllPlaylistGroupsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAllPlaylistGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistGroups []*PlaylistGroup `protobuf:"bytes,1,rep,name=playlist_groups,json=playlistGroups,proto3" json:"playlist_groups,omitempty"`
}

func (x *GetAllPlaylistGroupsResponse) Reset() {
	*x = GetAllPlaylistGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlaylistGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlaylistGroupsResponse) ProtoMessage() {}

func (x *GetAllPlaylistGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlaylistGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetAllPlaylistGroupsResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllPlaylistGroupsResponse) GetPlaylistGroups() []*PlaylistGroup {
	if x != nil {
		return x.PlaylistGroups
	}
	return nil
}

type ExecutePlaybarActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   PlaybarAction `protobuf:"varint,1,opt,name=action,proto3,enum=m3uetcpb.PlaybarAction" json:"action,omitempty"`
	Position int32         `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Ids      []int64       `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ExecutePlaybarActionRequest) Reset() {
	*x = ExecutePlaybarActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePlaybarActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlaybarActionRequest) ProtoMessage() {}

func (x *ExecutePlaybarActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlaybarActionRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlaybarActionRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{10}
}

func (x *ExecutePlaybarActionRequest) GetAction() PlaybarAction {
	if x != nil {
		return x.Action
	}
	return PlaybarAction_BAR_NONE
}

func (x *ExecutePlaybarActionRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ExecutePlaybarActionRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ExecutePlaylistActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action           PlaylistAction `protobuf:"varint,1,opt,name=action,proto3,enum=m3uetcpb.PlaylistAction" json:"action,omitempty"`
	Perspective      Perspective    `protobuf:"varint,2,opt,name=perspective,proto3,enum=m3uetcpb.Perspective" json:"perspective,omitempty"`
	Id               int64          `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Name             string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description      string         `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ResetDescription bool           `protobuf:"varint,6,opt,name=reset_description,json=resetDescription,proto3" json:"reset_description,omitempty"`
	PlaylistGroupId  int64          `protobuf:"varint,7,opt,name=playlist_group_id,json=playlistGroupId,proto3" json:"playlist_group_id,omitempty"`
}

func (x *ExecutePlaylistActionRequest) Reset() {
	*x = ExecutePlaylistActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePlaylistActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlaylistActionRequest) ProtoMessage() {}

func (x *ExecutePlaylistActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlaylistActionRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlaylistActionRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{11}
}

func (x *ExecutePlaylistActionRequest) GetAction() PlaylistAction {
	if x != nil {
		return x.Action
	}
	return PlaylistAction_PL_NONE
}

func (x *ExecutePlaylistActionRequest) GetPerspective() Perspective {
	if x != nil {
		return x.Perspective
	}
	return Perspective_MUSIC
}

func (x *ExecutePlaylistActionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecutePlaylistActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutePlaylistActionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExecutePlaylistActionRequest) GetResetDescription() bool {
	if x != nil {
		return x.ResetDescription
	}
	return false
}

func (x *ExecutePlaylistActionRequest) GetPlaylistGroupId() int64 {
	if x != nil {
		return x.PlaylistGroupId
	}
	return 0
}

type ExecutePlaylistActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExecutePlaylistActionResponse) Reset() {
	*x = ExecutePlaylistActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePlaylistActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlaylistActionResponse) ProtoMessage() {}

func (x *ExecutePlaylistActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlaylistActionResponse.ProtoReflect.Descriptor instead.
func (*ExecutePlaylistActionResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{12}
}

func (x *ExecutePlaylistActionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExecutePlaylistGroupActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action           PlaylistGroupAction `protobuf:"varint,1,opt,name=action,proto3,enum=m3uetcpb.PlaylistGroupAction" json:"action,omitempty"`
	Perspective      Perspective         `protobuf:"varint,2,opt,name=perspective,proto3,enum=m3uetcpb.Perspective" json:"perspective,omitempty"`
	Id               int64               `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Name             string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description      string              `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ResetDescription bool                `protobuf:"varint,6,opt,name=reset_description,json=resetDescription,proto3" json:"reset_description,omitempty"`
}

func (x *ExecutePlaylistGroupActionRequest) Reset() {
	*x = ExecutePlaylistGroupActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePlaylistGroupActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlaylistGroupActionRequest) ProtoMessage() {}

func (x *ExecutePlaylistGroupActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlaylistGroupActionRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlaylistGroupActionRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{13}
}

func (x *ExecutePlaylistGroupActionRequest) GetAction() PlaylistGroupAction {
	if x != nil {
		return x.Action
	}
	return PlaylistGroupAction_PG_NONE
}

func (x *ExecutePlaylistGroupActionRequest) GetPerspective() Perspective {
	if x != nil {
		return x.Perspective
	}
	return Perspective_MUSIC
}

func (x *ExecutePlaylistGroupActionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecutePlaylistGroupActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutePlaylistGroupActionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExecutePlaylistGroupActionRequest) GetResetDescription() bool {
	if x != nil {
		return x.ResetDescription
	}
	return false
}

type ExecutePlaylistGroupActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExecutePlaylistGroupActionResponse) Reset() {
	*x = ExecutePlaylistGroupActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePlaylistGroupActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlaylistGroupActionResponse) ProtoMessage() {}

func (x *ExecutePlaylistGroupActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlaylistGroupActionResponse.ProtoReflect.Descriptor instead.
func (*ExecutePlaylistGroupActionResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutePlaylistGroupActionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExecutePlaylistTrackActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       PlaylistTrackAction `protobuf:"varint,1,opt,name=action,proto3,enum=m3uetcpb.PlaylistTrackAction" json:"action,omitempty"`
	PlaylistId   int64               `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	Position     int32               `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	FromPosition int32               `protobuf:"varint,4,opt,name=from_position,json=fromPosition,proto3" json:"from_position,omitempty"`
	TrackIds     []int64             `protobuf:"varint,5,rep,packed,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
	Locations    []string            `protobuf:"bytes,6,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *ExecutePlaylistTrackActionRequest) Reset() {
	*x = ExecutePlaylistTrackActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePlaylistTrackActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlaylistTrackActionRequest) ProtoMessage() {}

func (x *ExecutePlaylistTrackActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlaylistTrackActionRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlaylistTrackActionRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{15}
}

func (x *ExecutePlaylistTrackActionRequest) GetAction() PlaylistTrackAction {
	if x != nil {
		return x.Action
	}
	return PlaylistTrackAction_PT_NONE
}

func (x *ExecutePlaylistTrackActionRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *ExecutePlaylistTrackActionRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ExecutePlaylistTrackActionRequest) GetFromPosition() int32 {
	if x != nil {
		return x.FromPosition
	}
	return 0
}

func (x *ExecutePlaylistTrackActionRequest) GetTrackIds() []int64 {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

func (x *ExecutePlaylistTrackActionRequest) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

type ImportPlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perspective Perspective `protobuf:"varint,1,opt,name=perspective,proto3,enum=m3uetcpb.Perspective" json:"perspective,omitempty"`
	Locations   []string    `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *ImportPlaylistsRequest) Reset() {
	*x = ImportPlaylistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportPlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPlaylistsRequest) ProtoMessage() {}

func (x *ImportPlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPlaylistsRequest.ProtoReflect.Descriptor instead.
func (*ImportPlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{16}
}

func (x *ImportPlaylistsRequest) GetPerspective() Perspective {
	if x != nil {
		return x.Perspective
	}
	return Perspective_MUSIC
}

func (x *ImportPlaylistsRequest) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

type ImportPlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ImportErrors []string `protobuf:"bytes,2,rep,name=import_errors,json=importErrors,proto3" json:"import_errors,omitempty"`
}

func (x *ImportPlaylistsResponse) Reset() {
	*x = ImportPlaylistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportPlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPlaylistsResponse) ProtoMessage() {}

func (x *ImportPlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPlaylistsResponse.ProtoReflect.Descriptor instead.
func (*ImportPlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{17}
}

func (x *ImportPlaylistsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ImportPlaylistsResponse) GetImportErrors() []string {
	if x != nil {
		return x.ImportErrors
	}
	return nil
}

type ExportPlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Location string               `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Format   PlaylistExportFormat `protobuf:"varint,3,opt,name=format,proto3,enum=m3uetcpb.PlaylistExportFormat" json:"format,omitempty"`
}

func (x *ExportPlaylistRequest) Reset() {
	*x = ExportPlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPlaylistRequest) ProtoMessage() {}

func (x *ExportPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPlaylistRequest.ProtoReflect.Descriptor instead.
func (*ExportPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{18}
}

func (x *ExportPlaylistRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExportPlaylistRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ExportPlaylistRequest) GetFormat() PlaylistExportFormat {
	if x != nil {
		return x.Format
	}
	return PlaylistExportFormat_PLEF_NONE
}

type SubscribeToPlaybarStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId   string       `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Event            PlaybarEvent `protobuf:"varint,2,opt,name=event,proto3,enum=m3uetcpb.PlaybarEvent" json:"event,omitempty"`
	ActivePlaylistId int64        `protobuf:"varint,3,opt,name=active_playlist_id,json=activePlaylistId,proto3" json:"active_playlist_id,omitempty"`
	// Types that are assignable to Item:
	//	*SubscribeToPlaybarStoreResponse_OpenPlaylist
	//	*SubscribeToPlaybarStoreResponse_OpenPlaylistTrack
	//	*SubscribeToPlaybarStoreResponse_OpenTrack
	//	*SubscribeToPlaybarStoreResponse_PlaylistGroup
	//	*SubscribeToPlaybarStoreResponse_Playlist
	Item isSubscribeToPlaybarStoreResponse_Item `protobuf_oneof:"item"`
}

func (x *SubscribeToPlaybarStoreResponse) Reset() {
	*x = SubscribeToPlaybarStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToPlaybarStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToPlaybarStoreResponse) ProtoMessage() {}

func (x *SubscribeToPlaybarStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToPlaybarStoreResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToPlaybarStoreResponse) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeToPlaybarStoreResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SubscribeToPlaybarStoreResponse) GetEvent() PlaybarEvent {
	if x != nil {
		return x.Event
	}
	return PlaybarEvent_BE_NONE
}

func (x *SubscribeToPlaybarStoreResponse) GetActivePlaylistId() int64 {
	if x != nil {
		return x.ActivePlaylistId
	}
	return 0
}

func (m *SubscribeToPlaybarStoreResponse) GetItem() isSubscribeToPlaybarStoreResponse_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *SubscribeToPlaybarStoreResponse) GetOpenPlaylist() *Playlist {
	if x, ok := x.GetItem().(*SubscribeToPlaybarStoreResponse_OpenPlaylist); ok {
		return x.OpenPlaylist
	}
	return nil
}

func (x *SubscribeToPlaybarStoreResponse) GetOpenPlaylistTrack() *PlaylistTrack {
	if x, ok := x.GetItem().(*SubscribeToPlaybarStoreResponse_OpenPlaylistTrack); ok {
		return x.OpenPlaylistTrack
	}
	return nil
}

func (x *SubscribeToPlaybarStoreResponse) GetOpenTrack() *Track {
	if x, ok := x.GetItem().(*SubscribeToPlaybarStoreResponse_OpenTrack); ok {
		return x.OpenTrack
	}
	return nil
}

func (x *SubscribeToPlaybarStoreResponse) GetPlaylistGroup() *PlaylistGroup {
	if x, ok := x.GetItem().(*SubscribeToPlaybarStoreResponse_PlaylistGroup); ok {
		return x.PlaylistGroup
	}
	return nil
}

func (x *SubscribeToPlaybarStoreResponse) GetPlaylist() *Playlist {
	if x, ok := x.GetItem().(*SubscribeToPlaybarStoreResponse_Playlist); ok {
		return x.Playlist
	}
	return nil
}

type isSubscribeToPlaybarStoreResponse_Item interface {
	isSubscribeToPlaybarStoreResponse_Item()
}

type SubscribeToPlaybarStoreResponse_OpenPlaylist struct {
	// Only for open playlists
	OpenPlaylist *Playlist `protobuf:"bytes,4,opt,name=open_playlist,json=openPlaylist,proto3,oneof"`
}

type SubscribeToPlaybarStoreResponse_OpenPlaylistTrack struct {
	OpenPlaylistTrack *PlaylistTrack `protobuf:"bytes,5,opt,name=open_playlist_track,json=openPlaylistTrack,proto3,oneof"`
}

type SubscribeToPlaybarStoreResponse_OpenTrack struct {
	OpenTrack *Track `protobuf:"bytes,6,opt,name=open_track,json=openTrack,proto3,oneof"`
}

type SubscribeToPlaybarStoreResponse_PlaylistGroup struct {
	// All the groups
	PlaylistGroup *PlaylistGroup `protobuf:"bytes,7,opt,name=playlist_group,json=playlistGroup,proto3,oneof"`
}

type SubscribeToPlaybarStoreResponse_Playlist struct {
	// All the playlists
	Playlist *Playlist `protobuf:"bytes,8,opt,name=playlist,proto3,oneof"`
}

func (*SubscribeToPlaybarStoreResponse_OpenPlaylist) isSubscribeToPlaybarStoreResponse_Item() {}

func (*SubscribeToPlaybarStoreResponse_OpenPlaylistTrack) isSubscribeToPlaybarStoreResponse_Item() {}

func (*SubscribeToPlaybarStoreResponse_OpenTrack) isSubscribeToPlaybarStoreResponse_Item() {}

func (*SubscribeToPlaybarStoreResponse_PlaylistGroup) isSubscribeToPlaybarStoreResponse_Item() {}

func (*SubscribeToPlaybarStoreResponse_Playlist) isSubscribeToPlaybarStoreResponse_Item() {}

type UnsubscribeFromPlaybarStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *UnsubscribeFromPlaybarStoreRequest) Reset() {
	*x = UnsubscribeFromPlaybarStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_m3uetcpb_playbar_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeFromPlaybarStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeFromPlaybarStoreRequest) ProtoMessage() {}

func (x *UnsubscribeFromPlaybarStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_m3uetcpb_playbar_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeFromPlaybarStoreRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeFromPlaybarStoreRequest) Descriptor() ([]byte, []int) {
	return file_api_m3uetcpb_playbar_proto_rawDescGZIP(), []int{20}
}

func (x *UnsubscribeFromPlaybarStoreRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

var File_api_m3uetcpb_playbar_proto protoreflect.FileDescriptor

var file_api_m3uetcpb_playbar_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x33,
	0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x33, 0x75, 0x65,
	0x74, 0x63, 0x70, 0x62, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2f, 0x70,
	0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x62, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x33, 0x75,
	0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x67, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x33,
	0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x6c, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x7c, 0x0a, 0x1b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74,
	0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74,
	0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x33, 0x75, 0x65,
	0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x22,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74,
	0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x16,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x33,
	0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e, 0x0a,
	0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x7b, 0x0a,
	0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xda, 0x03, 0x0a, 0x1f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70,
	0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x33, 0x75,
	0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x33,
	0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x4d, 0x0a, 0x22, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a, 0x60, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x52, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x52, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x52,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x54,
	0x52, 0x4f, 0x59, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x47, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x47, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x47, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x47, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x47, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4c,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x2a, 0x7a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x54, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x54, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x06, 0x2a, 0xd5, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x09, 0x32, 0x9f, 0x09, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x53, 0x76, 0x63, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x12, 0x1b, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x20, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x6d, 0x33, 0x75,
	0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x33, 0x75, 0x65,
	0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x33, 0x75, 0x65,
	0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x1a, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6d, 0x33, 0x75, 0x65,
	0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x33, 0x75,
	0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d,
	0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x42, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x0f, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x29, 0x2e, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5c,
	0x0a, 0x1b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x2e,
	0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x33,
	0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x6d, 0x33, 0x75, 0x65, 0x74, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_m3uetcpb_playbar_proto_rawDescOnce sync.Once
	file_api_m3uetcpb_playbar_proto_rawDescData = file_api_m3uetcpb_playbar_proto_rawDesc
)

func file_api_m3uetcpb_playbar_proto_rawDescGZIP() []byte {
	file_api_m3uetcpb_playbar_proto_rawDescOnce.Do(func() {
		file_api_m3uetcpb_playbar_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_m3uetcpb_playbar_proto_rawDescData)
	})
	return file_api_m3uetcpb_playbar_proto_rawDescData
}

var file_api_m3uetcpb_playbar_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_m3uetcpb_playbar_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_m3uetcpb_playbar_proto_goTypes = []interface{}{
	(PlaybarAction)(0),                         // 0: m3uetcpb.PlaybarAction
	(PlaylistAction)(0),                        // 1: m3uetcpb.PlaylistAction
	(PlaylistGroupAction)(0),                   // 2: m3uetcpb.PlaylistGroupAction
	(PlaylistTrackAction)(0),                   // 3: m3uetcpb.PlaylistTrackAction
	(PlaybarEvent)(0),                          // 4: m3uetcpb.PlaybarEvent
	(*GetPlaybarRequest)(nil),                  // 5: m3uetcpb.GetPlaybarRequest
	(*GetPlaybarResponse)(nil),                 // 6: m3uetcpb.GetPlaybarResponse
	(*GetPlaylistRequest)(nil),                 // 7: m3uetcpb.GetPlaylistRequest
	(*GetPlaylistResponse)(nil),                // 8: m3uetcpb.GetPlaylistResponse
	(*GetAllPlaylistsRequest)(nil),             // 9: m3uetcpb.GetAllPlaylistsRequest
	(*GetAllPlaylistsResponse)(nil),            // 10: m3uetcpb.GetAllPlaylistsResponse
	(*GetPlaylistGroupRequest)(nil),            // 11: m3uetcpb.GetPlaylistGroupRequest
	(*GetPlaylistGroupResponse)(nil),           // 12: m3uetcpb.GetPlaylistGroupResponse
	(*GetAllPlaylistGroupsRequest)(nil),        // 13: m3uetcpb.GetAllPlaylistGroupsRequest
	(*GetAllPlaylistGroupsResponse)(nil),       // 14: m3uetcpb.GetAllPlaylistGroupsResponse
	(*ExecutePlaybarActionRequest)(nil),        // 15: m3uetcpb.ExecutePlaybarActionRequest
	(*ExecutePlaylistActionRequest)(nil),       // 16: m3uetcpb.ExecutePlaylistActionRequest
	(*ExecutePlaylistActionResponse)(nil),      // 17: m3uetcpb.ExecutePlaylistActionResponse
	(*ExecutePlaylistGroupActionRequest)(nil),  // 18: m3uetcpb.ExecutePlaylistGroupActionRequest
	(*ExecutePlaylistGroupActionResponse)(nil), // 19: m3uetcpb.ExecutePlaylistGroupActionResponse
	(*ExecutePlaylistTrackActionRequest)(nil),  // 20: m3uetcpb.ExecutePlaylistTrackActionRequest
	(*ImportPlaylistsRequest)(nil),             // 21: m3uetcpb.ImportPlaylistsRequest
	(*ImportPlaylistsResponse)(nil),            // 22: m3uetcpb.ImportPlaylistsResponse
	(*ExportPlaylistRequest)(nil),              // 23: m3uetcpb.ExportPlaylistRequest
	(*SubscribeToPlaybarStoreResponse)(nil),    // 24: m3uetcpb.SubscribeToPlaybarStoreResponse
	(*UnsubscribeFromPlaybarStoreRequest)(nil), // 25: m3uetcpb.UnsubscribeFromPlaybarStoreRequest
	(Perspective)(0),                           // 26: m3uetcpb.Perspective
	(*Playlist)(nil),                           // 27: m3uetcpb.Playlist
	(*PlaylistTrack)(nil),                      // 28: m3uetcpb.PlaylistTrack
	(*Track)(nil),                              // 29: m3uetcpb.Track
	(*PlaylistGroup)(nil),                      // 30: m3uetcpb.PlaylistGroup
	(PlaylistExportFormat)(0),                  // 31: m3uetcpb.PlaylistExportFormat
	(*Empty)(nil),                              // 32: m3uetcpb.Empty
}
var file_api_m3uetcpb_playbar_proto_depIdxs = []int32{
	26, // 0: m3uetcpb.GetPlaybarRequest.perspective:type_name -> m3uetcpb.Perspective
	27, // 1: m3uetcpb.GetPlaybarResponse.playlists:type_name -> m3uetcpb.Playlist
	27, // 2: m3uetcpb.GetPlaylistResponse.playlist:type_name -> m3uetcpb.Playlist
	28, // 3: m3uetcpb.GetPlaylistResponse.playlist_tracks:type_name -> m3uetcpb.PlaylistTrack
	29, // 4: m3uetcpb.GetPlaylistResponse.tracks:type_name -> m3uetcpb.Track
	26, // 5: m3uetcpb.GetAllPlaylistsRequest.perspective:type_name -> m3uetcpb.Perspective
	27, // 6: m3uetcpb.GetAllPlaylistsResponse.playlists:type_name -> m3uetcpb.Playlist
	30, // 7: m3uetcpb.GetPlaylistGroupResponse.playlist_group:type_name -> m3uetcpb.PlaylistGroup
	26, // 8: m3uetcpb.GetAllPlaylistGroupsRequest.perspective:type_name -> m3uetcpb.Perspective
	30, // 9: m3uetcpb.GetAllPlaylistGroupsResponse.playlist_groups:type_name -> m3uetcpb.PlaylistGroup
	0,  // 10: m3uetcpb.ExecutePlaybarActionRequest.action:type_name -> m3uetcpb.PlaybarAction
	1,  // 11: m3uetcpb.ExecutePlaylistActionRequest.action:type_name -> m3uetcpb.PlaylistAction
	26, // 12: m3uetcpb.ExecutePlaylistActionRequest.perspective:type_name -> m3uetcpb.Perspective
	2,  // 13: m3uetcpb.ExecutePlaylistGroupActionRequest.action:type_name -> m3uetcpb.PlaylistGroupAction
	26, // 14: m3uetcpb.ExecutePlaylistGroupActionRequest.perspective:type_name -> m3uetcpb.Perspective
	3,  // 15: m3uetcpb.ExecutePlaylistTrackActionRequest.action:type_name -> m3uetcpb.PlaylistTrackAction
	26, // 16: m3uetcpb.ImportPlaylistsRequest.perspective:type_name -> m3uetcpb.Perspective
	31, // 17: m3uetcpb.ExportPlaylistRequest.format:type_name -> m3uetcpb.PlaylistExportFormat
	4,  // 18: m3uetcpb.SubscribeToPlaybarStoreResponse.event:type_name -> m3uetcpb.PlaybarEvent
	27, // 19: m3uetcpb.SubscribeToPlaybarStoreResponse.open_playlist:type_name -> m3uetcpb.Playlist
	28, // 20: m3uetcpb.SubscribeToPlaybarStoreResponse.open_playlist_track:type_name -> m3uetcpb.PlaylistTrack
	29, // 21: m3uetcpb.SubscribeToPlaybarStoreResponse.open_track:type_name -> m3uetcpb.Track
	30, // 22: m3uetcpb.SubscribeToPlaybarStoreResponse.playlist_group:type_name -> m3uetcpb.PlaylistGroup
	27, // 23: m3uetcpb.SubscribeToPlaybarStoreResponse.playlist:type_name -> m3uetcpb.Playlist
	5,  // 24: m3uetcpb.PlaybarSvc.GetPlaybar:input_type -> m3uetcpb.GetPlaybarRequest
	7,  // 25: m3uetcpb.PlaybarSvc.GetPlaylist:input_type -> m3uetcpb.GetPlaylistRequest
	9,  // 26: m3uetcpb.PlaybarSvc.GetAllPlaylists:input_type -> m3uetcpb.GetAllPlaylistsRequest
	11, // 27: m3uetcpb.PlaybarSvc.GetPlaylistGroup:input_type -> m3uetcpb.GetPlaylistGroupRequest
	13, // 28: m3uetcpb.PlaybarSvc.GetAllPlaylistGroups:input_type -> m3uetcpb.GetAllPlaylistGroupsRequest
	15, // 29: m3uetcpb.PlaybarSvc.ExecutePlaybarAction:input_type -> m3uetcpb.ExecutePlaybarActionRequest
	16, // 30: m3uetcpb.PlaybarSvc.ExecutePlaylistAction:input_type -> m3uetcpb.ExecutePlaylistActionRequest
	18, // 31: m3uetcpb.PlaybarSvc.ExecutePlaylistGroupAction:input_type -> m3uetcpb.ExecutePlaylistGroupActionRequest
	20, // 32: m3uetcpb.PlaybarSvc.ExecutePlaylistTrackAction:input_type -> m3uetcpb.ExecutePlaylistTrackActionRequest
	21, // 33: m3uetcpb.PlaybarSvc.ImportPlaylists:input_type -> m3uetcpb.ImportPlaylistsRequest
	23, // 34: m3uetcpb.PlaybarSvc.ExportPlaylist:input_type -> m3uetcpb.ExportPlaylistRequest
	32, // 35: m3uetcpb.PlaybarSvc.SubscribeToPlaybarStore:input_type -> m3uetcpb.Empty
	25, // 36: m3uetcpb.PlaybarSvc.UnsubscribeFromPlaybarStore:input_type -> m3uetcpb.UnsubscribeFromPlaybarStoreRequest
	6,  // 37: m3uetcpb.PlaybarSvc.GetPlaybar:output_type -> m3uetcpb.GetPlaybarResponse
	8,  // 38: m3uetcpb.PlaybarSvc.GetPlaylist:output_type -> m3uetcpb.GetPlaylistResponse
	10, // 39: m3uetcpb.PlaybarSvc.GetAllPlaylists:output_type -> m3uetcpb.GetAllPlaylistsResponse
	12, // 40: m3uetcpb.PlaybarSvc.GetPlaylistGroup:output_type -> m3uetcpb.GetPlaylistGroupResponse
	14, // 41: m3uetcpb.PlaybarSvc.GetAllPlaylistGroups:output_type -> m3uetcpb.GetAllPlaylistGroupsResponse
	32, // 42: m3uetcpb.PlaybarSvc.ExecutePlaybarAction:output_type -> m3uetcpb.Empty
	17, // 43: m3uetcpb.PlaybarSvc.ExecutePlaylistAction:output_type -> m3uetcpb.ExecutePlaylistActionResponse
	19, // 44: m3uetcpb.PlaybarSvc.ExecutePlaylistGroupAction:output_type -> m3uetcpb.ExecutePlaylistGroupActionResponse
	32, // 45: m3uetcpb.PlaybarSvc.ExecutePlaylistTrackAction:output_type -> m3uetcpb.Empty
	22, // 46: m3uetcpb.PlaybarSvc.ImportPlaylists:output_type -> m3uetcpb.ImportPlaylistsResponse
	32, // 47: m3uetcpb.PlaybarSvc.ExportPlaylist:output_type -> m3uetcpb.Empty
	24, // 48: m3uetcpb.PlaybarSvc.SubscribeToPlaybarStore:output_type -> m3uetcpb.SubscribeToPlaybarStoreResponse
	32, // 49: m3uetcpb.PlaybarSvc.UnsubscribeFromPlaybarStore:output_type -> m3uetcpb.Empty
	37, // [37:50] is the sub-list for method output_type
	24, // [24:37] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_api_m3uetcpb_playbar_proto_init() }
func file_api_m3uetcpb_playbar_proto_init() {
	if File_api_m3uetcpb_playbar_proto != nil {
		return
	}
	file_api_m3uetcpb_empty_proto_init()
	file_api_m3uetcpb_perspective_proto_init()
	file_api_m3uetcpb_playlist_proto_init()
	file_api_m3uetcpb_track_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_m3uetcpb_playbar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaybarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaybarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlaylistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlaylistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlaylistGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlaylistGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePlaybarActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePlaylistActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePlaylistActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePlaylistGroupActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePlaylistGroupActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePlaylistTrackActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportPlaylistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportPlaylistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToPlaybarStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_m3uetcpb_playbar_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeFromPlaybarStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_m3uetcpb_playbar_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*SubscribeToPlaybarStoreResponse_OpenPlaylist)(nil),
		(*SubscribeToPlaybarStoreResponse_OpenPlaylistTrack)(nil),
		(*SubscribeToPlaybarStoreResponse_OpenTrack)(nil),
		(*SubscribeToPlaybarStoreResponse_PlaylistGroup)(nil),
		(*SubscribeToPlaybarStoreResponse_Playlist)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_m3uetcpb_playbar_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_m3uetcpb_playbar_proto_goTypes,
		DependencyIndexes: file_api_m3uetcpb_playbar_proto_depIdxs,
		EnumInfos:         file_api_m3uetcpb_playbar_proto_enumTypes,
		MessageInfos:      file_api_m3uetcpb_playbar_proto_msgTypes,
	}.Build()
	File_api_m3uetcpb_playbar_proto = out.File
	file_api_m3uetcpb_playbar_proto_rawDesc = nil
	file_api_m3uetcpb_playbar_proto_goTypes = nil
	file_api_m3uetcpb_playbar_proto_depIdxs = nil
}
