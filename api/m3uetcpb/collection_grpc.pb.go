// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package m3uetcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionSvcClient is the client API for CollectionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionSvcClient interface {
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	GetAllCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllCollectionsResponse, error)
	AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionResponse, error)
	RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*Empty, error)
	ScanCollection(ctx context.Context, in *ScanCollectionRequest, opts ...grpc.CallOption) (*Empty, error)
	DiscoverCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type collectionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionSvcClient(cc grpc.ClientConnInterface) CollectionSvcClient {
	return &collectionSvcClient{cc}
}

func (c *collectionSvcClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvcClient) GetAllCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllCollectionsResponse, error) {
	out := new(GetAllCollectionsResponse)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/GetAllCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvcClient) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionResponse, error) {
	out := new(AddCollectionResponse)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/AddCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvcClient) RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/RemoveCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvcClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvcClient) ScanCollection(ctx context.Context, in *ScanCollectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/ScanCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvcClient) DiscoverCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/m3uetcpb.CollectionSvc/DiscoverCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionSvcServer is the server API for CollectionSvc service.
// All implementations must embed UnimplementedCollectionSvcServer
// for forward compatibility
type CollectionSvcServer interface {
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	GetAllCollections(context.Context, *Empty) (*GetAllCollectionsResponse, error)
	AddCollection(context.Context, *AddCollectionRequest) (*AddCollectionResponse, error)
	RemoveCollection(context.Context, *RemoveCollectionRequest) (*Empty, error)
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*Empty, error)
	ScanCollection(context.Context, *ScanCollectionRequest) (*Empty, error)
	DiscoverCollections(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedCollectionSvcServer()
}

// UnimplementedCollectionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionSvcServer struct {
}

func (UnimplementedCollectionSvcServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedCollectionSvcServer) GetAllCollections(context.Context, *Empty) (*GetAllCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCollections not implemented")
}
func (UnimplementedCollectionSvcServer) AddCollection(context.Context, *AddCollectionRequest) (*AddCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollection not implemented")
}
func (UnimplementedCollectionSvcServer) RemoveCollection(context.Context, *RemoveCollectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollection not implemented")
}
func (UnimplementedCollectionSvcServer) UpdateCollection(context.Context, *UpdateCollectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedCollectionSvcServer) ScanCollection(context.Context, *ScanCollectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanCollection not implemented")
}
func (UnimplementedCollectionSvcServer) DiscoverCollections(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverCollections not implemented")
}
func (UnimplementedCollectionSvcServer) mustEmbedUnimplementedCollectionSvcServer() {}

// UnsafeCollectionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionSvcServer will
// result in compilation errors.
type UnsafeCollectionSvcServer interface {
	mustEmbedUnimplementedCollectionSvcServer()
}

func RegisterCollectionSvcServer(s grpc.ServiceRegistrar, srv CollectionSvcServer) {
	s.RegisterService(&CollectionSvc_ServiceDesc, srv)
}

func _CollectionSvc_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvc_GetAllCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).GetAllCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/GetAllCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).GetAllCollections(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvc_AddCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).AddCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/AddCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).AddCollection(ctx, req.(*AddCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvc_RemoveCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).RemoveCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/RemoveCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).RemoveCollection(ctx, req.(*RemoveCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvc_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvc_ScanCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).ScanCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/ScanCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).ScanCollection(ctx, req.(*ScanCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvc_DiscoverCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvcServer).DiscoverCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.CollectionSvc/DiscoverCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvcServer).DiscoverCollections(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionSvc_ServiceDesc is the grpc.ServiceDesc for CollectionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "m3uetcpb.CollectionSvc",
	HandlerType: (*CollectionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollection",
			Handler:    _CollectionSvc_GetCollection_Handler,
		},
		{
			MethodName: "GetAllCollections",
			Handler:    _CollectionSvc_GetAllCollections_Handler,
		},
		{
			MethodName: "AddCollection",
			Handler:    _CollectionSvc_AddCollection_Handler,
		},
		{
			MethodName: "RemoveCollection",
			Handler:    _CollectionSvc_RemoveCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _CollectionSvc_UpdateCollection_Handler,
		},
		{
			MethodName: "ScanCollection",
			Handler:    _CollectionSvc_ScanCollection_Handler,
		},
		{
			MethodName: "DiscoverCollections",
			Handler:    _CollectionSvc_DiscoverCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/m3uetcpb/collection.proto",
}
