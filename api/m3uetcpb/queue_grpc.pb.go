// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/m3uetcpb/queue.proto

package m3uetcpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueSvcClient is the client API for QueueSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueSvcClient interface {
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	ExecuteQueueAction(ctx context.Context, in *ExecuteQueueActionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubscribeToQueueStore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (QueueSvc_SubscribeToQueueStoreClient, error)
	UnsubscribeFromQueueStore(ctx context.Context, in *UnsubscribeFromQueueStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type queueSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueSvcClient(cc grpc.ClientConnInterface) QueueSvcClient {
	return &queueSvcClient{cc}
}

func (c *queueSvcClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	out := new(GetQueueResponse)
	err := c.cc.Invoke(ctx, "/m3uetcpb.QueueSvc/GetQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSvcClient) ExecuteQueueAction(ctx context.Context, in *ExecuteQueueActionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/m3uetcpb.QueueSvc/ExecuteQueueAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSvcClient) SubscribeToQueueStore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (QueueSvc_SubscribeToQueueStoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueueSvc_ServiceDesc.Streams[0], "/m3uetcpb.QueueSvc/SubscribeToQueueStore", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueSvcSubscribeToQueueStoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueueSvc_SubscribeToQueueStoreClient interface {
	Recv() (*SubscribeToQueueStoreResponse, error)
	grpc.ClientStream
}

type queueSvcSubscribeToQueueStoreClient struct {
	grpc.ClientStream
}

func (x *queueSvcSubscribeToQueueStoreClient) Recv() (*SubscribeToQueueStoreResponse, error) {
	m := new(SubscribeToQueueStoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueSvcClient) UnsubscribeFromQueueStore(ctx context.Context, in *UnsubscribeFromQueueStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/m3uetcpb.QueueSvc/UnsubscribeFromQueueStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueSvcServer is the server API for QueueSvc service.
// All implementations must embed UnimplementedQueueSvcServer
// for forward compatibility
type QueueSvcServer interface {
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	ExecuteQueueAction(context.Context, *ExecuteQueueActionRequest) (*empty.Empty, error)
	SubscribeToQueueStore(*empty.Empty, QueueSvc_SubscribeToQueueStoreServer) error
	UnsubscribeFromQueueStore(context.Context, *UnsubscribeFromQueueStoreRequest) (*empty.Empty, error)
	mustEmbedUnimplementedQueueSvcServer()
}

// UnimplementedQueueSvcServer must be embedded to have forward compatible implementations.
type UnimplementedQueueSvcServer struct {
}

func (UnimplementedQueueSvcServer) GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedQueueSvcServer) ExecuteQueueAction(context.Context, *ExecuteQueueActionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQueueAction not implemented")
}
func (UnimplementedQueueSvcServer) SubscribeToQueueStore(*empty.Empty, QueueSvc_SubscribeToQueueStoreServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToQueueStore not implemented")
}
func (UnimplementedQueueSvcServer) UnsubscribeFromQueueStore(context.Context, *UnsubscribeFromQueueStoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromQueueStore not implemented")
}
func (UnimplementedQueueSvcServer) mustEmbedUnimplementedQueueSvcServer() {}

// UnsafeQueueSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueSvcServer will
// result in compilation errors.
type UnsafeQueueSvcServer interface {
	mustEmbedUnimplementedQueueSvcServer()
}

func RegisterQueueSvcServer(s grpc.ServiceRegistrar, srv QueueSvcServer) {
	s.RegisterService(&QueueSvc_ServiceDesc, srv)
}

func _QueueSvc_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSvcServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.QueueSvc/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSvcServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSvc_ExecuteQueueAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteQueueActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSvcServer).ExecuteQueueAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.QueueSvc/ExecuteQueueAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSvcServer).ExecuteQueueAction(ctx, req.(*ExecuteQueueActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSvc_SubscribeToQueueStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueSvcServer).SubscribeToQueueStore(m, &queueSvcSubscribeToQueueStoreServer{stream})
}

type QueueSvc_SubscribeToQueueStoreServer interface {
	Send(*SubscribeToQueueStoreResponse) error
	grpc.ServerStream
}

type queueSvcSubscribeToQueueStoreServer struct {
	grpc.ServerStream
}

func (x *queueSvcSubscribeToQueueStoreServer) Send(m *SubscribeToQueueStoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueueSvc_UnsubscribeFromQueueStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeFromQueueStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSvcServer).UnsubscribeFromQueueStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3uetcpb.QueueSvc/UnsubscribeFromQueueStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSvcServer).UnsubscribeFromQueueStore(ctx, req.(*UnsubscribeFromQueueStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueSvc_ServiceDesc is the grpc.ServiceDesc for QueueSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "m3uetcpb.QueueSvc",
	HandlerType: (*QueueSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueue",
			Handler:    _QueueSvc_GetQueue_Handler,
		},
		{
			MethodName: "ExecuteQueueAction",
			Handler:    _QueueSvc_ExecuteQueueAction_Handler,
		},
		{
			MethodName: "UnsubscribeFromQueueStore",
			Handler:    _QueueSvc_UnsubscribeFromQueueStore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToQueueStore",
			Handler:       _QueueSvc_SubscribeToQueueStore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/m3uetcpb/queue.proto",
}
